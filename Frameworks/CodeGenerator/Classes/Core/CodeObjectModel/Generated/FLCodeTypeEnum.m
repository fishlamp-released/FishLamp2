// 
// FLCodeTypeEnum.m
// 
// DO NOT MODIFY!! Modifications will be overwritten.
// Generated by: Mike Fullerton @ 6/2/13 5:39 PM with PackMule (3.0.0.100)
// 
// Project: FishLamp Code Generator
// Schema: ObjectModel
// 
// Copyright 2013 (c) GreenTongue Software LLC, Mike Fullerton
// The FishLamp Framework is released under the MIT License: http://fishlamp.com/license
// 

#import "FLCodeTypeEnum.h"

NSString* FLCodeTypeEnumStringFromEnum(FLCodeTypeEnum theEnum) {
    switch(theEnum) {
        case FLCodeTypeEnumEnum:{
            return kFLCodeTypeEnumEnum;
        }
        break;
        case FLCodeTypeEnumImmuteable:{
            return kFLCodeTypeEnumImmuteable;
        }
        break;
        case FLCodeTypeEnumObject:{
            return kFLCodeTypeEnumObject;
        }
        break;
        case FLCodeTypeEnumValue:{
            return kFLCodeTypeEnumValue;
        }
        break;
    }
    return nil;
}

FLCodeTypeEnum FLCodeTypeEnumEnumFromString(NSString* theString) {
    static NSDictionary* s_enumLookup = nil;
    static dispatch_once_t s_lookupPredicate = 0;
    dispatch_once(&s_lookupPredicate, ^{
        s_enumLookup = [[NSDictionary alloc] initWithObjectsAndKeys:
            [NSNumber numberWithInteger:FLCodeTypeEnumEnum], [kFLCodeTypeEnumEnum lowercaseString],
            [NSNumber numberWithInteger:FLCodeTypeEnumImmuteable], [kFLCodeTypeEnumImmuteable lowercaseString],
            [NSNumber numberWithInteger:FLCodeTypeEnumObject], [kFLCodeTypeEnumObject lowercaseString],
            [NSNumber numberWithInteger:FLCodeTypeEnumValue], [kFLCodeTypeEnumValue lowercaseString],
            nil ];
    });
    NSNumber* value = [s_enumLookup objectForKey:[theString lowercaseString]];
    return value == nil ? NSNotFound : [value integerValue];
}

@implementation FLCodeTypeEnumEnumSet
+ (id) enumSet{
    return FLAutorelease([[[self class] alloc] initWithValueLookup:(FLEnumSetEnumValueLookup*)  FLCodeTypeEnumEnumFromString stringLookup:(FLEnumSetEnumStringLookup*) FLCodeTypeEnumStringFromEnum]);
}
+ (id) enumSet:(NSString*) concatenatedEnumString {
    FLCodeTypeEnumEnumSet* outObject = FLAutorelease([[[self class] alloc] initWithValueLookup:(FLEnumSetEnumValueLookup*)  FLCodeTypeEnumEnumFromString stringLookup:(FLEnumSetEnumStringLookup*) FLCodeTypeEnumStringFromEnum]);
    [outObject setConcatenatedString:concatenatedEnumString];
    return outObject;
}
@end
